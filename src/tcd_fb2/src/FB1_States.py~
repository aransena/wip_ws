#!/usr/bin/env python
import time
import random 

import rospy
import smach
import smach_ros
import threading
import actionlib

import learning_actionlib.msg as FA
import move_base_msgs.msg as MB


from smach_ros import SimpleActionState 
from smach_ros import ServiceState
from std_msgs.msg import String

responses = ['PENDING','ACTIVE','REJECTED','SUCCEEDED','ABORTED','PREEMPTING','PREEMPTED','RECALLING','RECALLED','LOST']



class read_rsbb(smach.State):
	def __init__(self):
		smach.State.__init__(self,outcomes=['proceed','error'])

	def execute(self, userdata):
		rospy.loginfo('Executing S0_READ')
		time.sleep(3)
		#print "Calibration complete"	
		return 'proceed'

class calibration(smach.State):
	def __init__(self):
		smach.State.__init__(self,outcomes=['proceed','error'])

	def execute(self, userdata):
		rospy.loginfo('Executing S1_CALIBRATE')
		time.sleep(1)
		#print "Calibration complete"	
		return 'proceed'

class set_goal(smach.State):
	def __init__(self):
		smach.State.__init__(self, outcomes=['new_goal','no_more_goals','error'],
									input_keys=['read_request_goal'],
									output_keys=['send_nav_goal'])
		self.count = 0
	def execute(self, userdata):
		rospy.loginfo('Executing state S2_SET_GOAL')
		if userdata.read_request_goal:
			goal = MB.MoveBaseGoal()
			goal.target_pose.header.frame_id = "odom"
			goal.target_pose.header.stamp = rospy.Time.now()
			goal.target_pose.pose.position.x = random.randint(-5,5)
			goal.target_pose.pose.position.y = 0
			goal.target_pose.pose.orientation.w = 1
			userdata.send_nav_goal = goal
			print "GOAL = ", goal.target_pose.pose.position.x
			return 'new_goal'		
class navigate(smach.State):
	def __init__(self):
	o	smach.State.__init__(self, outcomes=['goal_reached','goal_unachievable','error'],
									input_keys=['read_nav_goal'],
									output_keys=['send_request_goal','send_current_goal'])

		self.client = actionlib.SimpleActionClient('move_base', MB.MoveBaseAction)

	def execute(self, userdata):
		rospy.loginfo('Executing state S3_NAVIGATE')
		#time.sleep(1)

		self.client.wait_for_server()

		self.client.send_goal(userdata.read_nav_goal)
		print "here"
		
		while (self.client.wait_for_result(rospy.Duration(1.0))!=True):
			print responses[self.client.get_state()]

		result = self.client.get_state()
		if result==3: ## success
			return 'goal_reached'
		else:
			return 'error'

		# if random.random()>0.7:
		# 	return 'goal_unachievable'
		# elif random.random()>0.9:
		# 	return 'error'
		# return 'goal_reached'

class carrot(smach.State):
	def __init__(self):
		smach.State.__init__(self, outcomes=['new_temp_goal','error'])

	def execute(self, userdata):
		rospy.loginfo('Executing state S4_CARROT')
		time.sleep(1)
		if random.random()>0.9:
			return 'error'
		else:
			return 'new_temp_goal'

class cleanup(smach.State):
	def __init__(self):
		smach.State.__init__(self, outcomes=['success_end','fail_end','error'])

	def execute(self, userdata):
		rospy.loginfo('Executing state S5_CLEANUP')
		time.sleep(1)
		if random.random()<0.5:
			return 'success_end'
		elif random.random()<0.9:
			return 'fail_end'
		else:
			return 'error'

class error_handler(smach.State):
	def __init__(self):
		smach.State.__init__(self, outcomes=['exit'])

	def execute(self, userdata):
		rospy.loginfo('Executing state ERR')
		time.sleep(1)
		return 'exit'


# class move(smach.State): ## SHOULD BE SERVICE CALL?
# 	def __init__(self):
# 		smach.State.__init__(self, outcomes=['iso_success','iso_fail'])
# 		# self.mutex = threading.Lock()
# 		# self.hello_world_received = False
# 		# self.subscriber = rospy.Subscriber("chatter", String, self.iso_obj_cb)

# 	# def iso_obj_cb(self, data):
# 	# 	#rospy.loginfo(rospy.get_caller_id() + "I heard %s", data.data)
# 	# 	#print "iso_obj callback running"
# 	# 	if "hello world" in data.data:
# 	# 		self.hello_world_received = True

# 	def execute(self, userdata):
# 		rospy.loginfo('Executing state S1:IDLE')
# 		#wait for a maximum of 30 seconds 
# 		#sub = rospy.Subscriber("chatter", String, self.iso_obj_cb)
# 		# for i in range(0, 300):
# 		# 	self.mutex.acquire()
# 		# 	if self.hello_world_received:
# 		# 		try:
# 		# 			time.sleep(10)
# 		# 			self.subscriber.unregister()
					
# 		# 			print "iso_object success!"
# 		# 			return 'iso_success' #ok we received hello world
# 		# 		except Exception,e:
# 		# 			print str(e)
# 		# 			rospy.loginfo('Error exiting S2_A1_ISOLATE_OBJ')
# 		# 			return 'iso_fail'

# 		# 	self.mutex.release()
# 		# 	time.sleep(.1)
# 		# 	print "waiting ", i #still waiting
# 		return 'iso_fail' #we didn't get 2 in the 30 sec
